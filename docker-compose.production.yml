version: '3.8'

services:
  # Base de données MariaDB
  mariadb:
    image: mariadb:10.11
    container_name: mediresolv-mariadb
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MARIADB_AUTO_UPGRADE: 1
      MARIADB_DISABLE_UPGRADE_BACKUP: 1
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./database/mariadb-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./mariadb.conf:/etc/mysql/conf.d/mariadb.conf:ro
    ports:
      - "127.0.0.1:3306:3306"
    networks:
      - mediresolv-network
    healthcheck:
      test: ["CMD", "mariadb-admin", "-u", "root", "-p${DB_ROOT_PASSWORD}", "ping", "--silent"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=200
      --query-cache-size=64M
      --query-cache-type=1
      --slow-query-log=1
      --long-query-time=2
      --log-queries-not-using-indexes=1

  # Redis pour le cache et sessions
  redis:
    image: redis:7-alpine
    container_name: mediresolv-redis
    restart: unless-stopped
    command: >
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - mediresolv-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: mediresolv-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: mariadb
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: 3306
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRE: 8h
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      LOG_LEVEL: info
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backup_data:/app/backups
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - mediresolv-network
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Frontend Nginx
  frontend:
    image: nginx:alpine
    container_name: mediresolv-frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - backend_uploads:/usr/share/nginx/html/uploads:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mediresolv-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Service de sauvegarde automatique
  backup:
    image: mariadb:10.11
    container_name: mediresolv-backup
    restart: "no"
    environment:
      MYSQL_HOST: mariadb
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      BACKUP_RETENTION_DAYS: 30
    volumes:
      - backup_data:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - mediresolv-network
    depends_on:
      mariadb:
        condition: service_healthy
    profiles:
      - backup
    command: ["sh", "/backup.sh"]

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: mediresolv-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - mediresolv-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana pour les métriques (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: mediresolv-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - mediresolv-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

volumes:
  mariadb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/mediresolv/data/mariadb
      
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/mediresolv/data/redis
      
  backend_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/mediresolv/uploads
      
  backend_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/mediresolv/logs
      
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/mediresolv/backups
      
  prometheus_data:
    driver: local
    
  grafana_data:
    driver: local

networks:
  mediresolv-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24